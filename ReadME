The "hash_gen.cpp" file is used to generate hash values from plain text and store the data into hash_value.dat file. This is simluating that the database and OS in real world store user passwords. For now, we only calcualte and save 1 round hash value using SHA256 algo. We will update to 10000 rounds hash values laster. Please see our "update" file for more information.

Compile "hash_gen.cpp" file by using command "g++ -o hash_gen hash_gen.cpp". If you want to generate hashs for different plain text, please modify the "hash_gen.cpp" directly.

The "cracker.cpp" file is used to dictionary attack. We use "clock()" function to time the program. Compile the code using command "g++ -o cracker cracker.cpp"

Using command "./cracker $dictionary_path $hash_value.dat_path" to crack the password hash that saved inside the .dat file. 

=================================================================
Update 3/17/2016
Add parallelized programe (openMP version) to github.

Use command "g++ -fopenmp " to compile "cracker_omp.cpp" file and submit bash "crackeromp.bash" to discovery cluster to run.

output file can be found in output folder.

=================================================================
Update 3/28/2016
Clean up folder. You can find sequential code in "seq_code" folder and Parallelized code in "par_code" folder.

